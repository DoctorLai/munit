#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=debug)
##
## Top level test_case class providing infrastructure for tests
## that require an application to be running.
##
## This class provides a framework for writing tests that
## require an database, but not an application, to be running
## by implementing the following behaviour:
##
## * set_up() 
##   * ensure that there is a database
##   * ensure that the database is writable 
##     * It creates an in-memory scratchpad in any
##       datasets (as specified by dataset_names) in which the test
##       will make any changes.  
## * tear_down() 
##   * Remove the scratchpad so the dataset reverts to its original state. 
##
## Subclasses of database_test should implement the following methods:
##
## * writable_dataset_names - This should return the names of any datasets that need to be writable. 
##
## database_test provides the following API methods:
##
## * dataset( ds_name ) - This returns the dataset identified by ds_name  
##
def_slotted_exemplar( :database_test,
        {
		{ :properties,   _unset },
		{ :datasets,     _unset }
	},
        { :test_case, :database_system_test_mixin } )
$

database_test.define_shared_constant(:test_aspects,
	property_list.new_with(:never, "never"), :public )
$

_pragma(classify_level=debug)
database_test.define_shared_variable(:database_path,
        ##
        ## The location of the cambridge_db to use.
        ##
        "u:/swdev/databases/dev_ds_420/ds/ds_admin", :public)
$

database_test.method_table.resolve_conflicts( :test_case )
$

_pragma(classify_level=debug)
_method database_test.properties
	## 
	##

	>> .properties
	
_endmethod
$


_pragma(classify_level=debug, usage={subclassable})
_method database_test.writable_dataset_names
	## 
	## Return the names of any datasets that need to be writable
	##

	>> {}
	
_endmethod
$

_pragma(classify_level=debug)
_method database_test.set_up()
	##
	## This gets called before each test and ensures that the
	## correct database is available. 
	## It also creates a scratchpad to hold any transient data.
	##
        _self.check_correct_database_open()
	.properties << property_list.new()
	_self.given_writable_datasets( _self.writable_dataset_names )

_endmethod
$

_private _method database_test.check_correct_database_open()
        ## 
        ## If there is no database open, then opens the nominated
        ## one. If one is open but it isn't the correct one (the ace
        ## path is incorrect) then closes that and opens the correct
        ## one.
        ##
        _if ds_environment.c_is_initialised? _andif
            gis_program_manager.ace_top_view _isnt _unset _andif
            gis_program_manager.ace_top_view.searchpath.at_using_default("", 1) = _self.database_path
        _then _return
        _endif

        gis_program_manager.reinitialise()
        _block
                #
                # Suppress witterage. Note that
                # raw_swdp_manager.open_partition() forcibly witters to
                # !terminal! and that easily can't be suppressed without hiding
                # real errors. 
                #
                _handling information _with procedure 
                _handling warning _with procedure
                
                open_database({_self.database_path})
        _endblock 
_endmethod
$


_pragma(classify_level=debug)
_method database_test.tear_down()
	##
	## This gets called after each test and deletes the scratchpad.
	##

	_super( test_case ).tear_down()
	_self.close_datasets()
	
_endmethod
$
