#% text_encoding = iso8859_1
_package sw
## Test helper methods for testing of messages.
##
## Provides two mechanisms for checking that message groups
## have messages defined for given message id.
##
## One shot call to .check_for_missing_messages() for one test.
##
## Building a set of registered messges during test definitiona
## that can then be tested using one dedicated message test
## using register_message_group() and check_for_registered_missing_messages()
##

_pragma(classify_level=advanced,topic=MUnit)
def_slotted_exemplar(:message_tests,
	{ },
	{ :test_case }
)

$
_pragma(classify_level=debug)
## Holds a list of messgae groups and messages
message_tests.define_shared_constant(:groups_and_messages, property_list.new(), :public)
$

_pragma(classify_level=debug)
_method  message_tests.check_for_missing_messages(groups_and_messages)

	## Checks a message groups has messages defined for messge ids.
	## MESSAGE_GROUP the name of the message group as a symbol
	## MESSAGES a vector of the message ids to check for
	
	_self.int!check_for_missing_messages(groups_and_messages)
_endmethod 
$

_pragma(classify_level=debug)
_private _method  message_tests.int!check_for_missing_messages(groups_and_messages)

	## Internal method that asserts messages exist.

	_for group, msg_ids _over groups_and_messages.keys_and_elements()
	_loop
		msg_handler <<  message_handler.new( group )
		_for msg_id _over msg_ids.elements()
		_loop
			_self.assert_true ( msg_handler.has_message?(msg_id),
					     "Checking message for: " + msg_id + " in handler: " + msg_handler.name  )
		_endloop
	_endloop			
_endmethod
$

_pragma(classify_level=debug)
_method  message_tests.register_message_group(message_group, messages)

	## Registers message groups and messages for use in testing
	## MESSAGE_GROUP the name of the message group as a symbol
	## MESSAGES a vector of the message ids to check for
	_self.groups_and_messages[message_group] << messages
_endmethod
$

_pragma(classify_level=debug)
_private _method  message_tests.check_for_registered_missing_messages()

	## Checks a message groups has messages defined for messge ids.
	##
	## Should be used follwoing use of register_message_group.
	## This can be used for multiple test suites registering
	## messages and then one test checking all messages.

	_self.int!check_for_missing_messages(_self.groups_and_messages)
_endmethod 
$




